apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
    - name: my-app
      port: 8080
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: my-app:latest
        imagePullPolicy: Never
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
          - containerPort: 3000
      - name: rabbitmq-consumer
        image: rabbitmq-consumer:latest
        imagePullPolicy: Never
        env:
          - name: RABBITMQ_HOSTNAME
            value: rabbitmq
          - name: RABBITMQ_PORT
            value: '5672'
          - name: DISPATCHER_TYPE
            value: http
          - name: MAIN_SERVICE_NAME
            value: 'my-app'
          - name: HTTP_DISPATCHER_BASE_URL
            value: 'http://localhost:3000'
          - name: HTTP_DISPATCHER_ENDPOINT
            value: '/message'
          - name: HTTP_DISPATCHER_HEALTHCHECK
            value: '/is-alive'
          ## and auth envs
        volumeMounts:
          - name: queues-definitions
            mountPath: "/var/queues-definitions"
            readOnly: true
      volumes:
        - name: queues-definitions
          configMap:
            name: queues-definitions